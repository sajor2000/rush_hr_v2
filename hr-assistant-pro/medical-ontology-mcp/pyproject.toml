[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "medical-ontology-mcp"
version = "1.0.0"
description = "Model Context Protocol server for medical terminology and clinical coding"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Medical Informatics Research Team", email = "contact@medical-ontology-mcp.org"}
]
maintainers = [
    {name = "Medical Informatics Research Team", email = "contact@medical-ontology-mcp.org"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Environment :: Web Environment",
]
keywords = [
    "medical",
    "ontology", 
    "clinical",
    "terminology",
    "healthcare",
    "informatics",
    "ICD-10",
    "SNOMED",
    "RxNorm", 
    "LOINC",
    "MCP",
    "model-context-protocol",
    "AI",
    "research",
    "coding",
    "diagnosis",
    "medication",
    "laboratory",
    "FHIR",
    "HL7",
]
requires-python = ">=3.8"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.5.0",
    "click>=8.1.0",
    "aiofiles>=23.2.1",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipython>=8.0.0",
    "notebook>=6.5.0",
    "ipywidgets>=8.0.0",
]
research = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "scikit-learn>=1.3.0",
]
performance = [
    "orjson>=3.9.0",
    "ujson>=5.8.0",
    "httpx>=0.25.0",
    "asyncpg>=0.28.0",
]
enterprise = [
    "redis>=4.6.0",
    "celery>=5.3.0",
    "docker>=6.1.0",
    "kubernetes>=27.2.0",
]

[project.urls]
Homepage = "https://github.com/sajor2000/mcp_medicalterminology"
Documentation = "https://medical-ontology-mcp.readthedocs.io/"
Repository = "https://github.com/sajor2000/mcp_medicalterminology.git"
Issues = "https://github.com/sajor2000/mcp_medicalterminology/issues"
Changelog = "https://github.com/sajor2000/mcp_medicalterminology/blob/main/CHANGELOG.md"

[project.scripts]
medical-ontology-mcp = "medical_ontology_mcp.cli:main"
medical-mcp = "medical_ontology_mcp.cli:main"
mcp-medical = "medical_ontology_mcp.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
medical_ontology_mcp = [
    "data/sample/*.json",
    "data/sample/*.csv",
    "configs/*.json",
    "configs/*.yaml",
    "templates/*.html",
    "templates/*.md",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "clinical: marks tests that require clinical data",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]